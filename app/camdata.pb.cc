// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camdata.proto

#include "camdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace target_cam {
class target_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<target_data>
      _instance;
} _target_data_default_instance_;
}  // namespace target_cam
namespace protobuf_camdata_2eproto {
static void InitDefaultstarget_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::target_cam::_target_data_default_instance_;
    new (ptr) ::target_cam::target_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::target_cam::target_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_target_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstarget_data}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_target_data.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::target_cam::target_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::target_cam::target_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::target_cam::target_data, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::target_cam::target_data, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::target_cam::target_data, img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::target_cam::target_data, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::target_cam::target_data, long__),
  0,
  4,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::target_cam::target_data)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::target_cam::_target_data_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "camdata.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rcamdata.proto\022\ntarget_cam\"P\n\013target_da"
      "ta\022\014\n\004name\030\001 \002(\t\022\013\n\003seq\030\002 \002(\005\022\013\n\003img\030\003 \001"
      "(\014\022\013\n\003lat\030\004 \001(\t\022\014\n\004long\030\005 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camdata.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_camdata_2eproto
namespace target_cam {

// ===================================================================

void target_data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int target_data::kNameFieldNumber;
const int target_data::kSeqFieldNumber;
const int target_data::kImgFieldNumber;
const int target_data::kLatFieldNumber;
const int target_data::kLongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

target_data::target_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camdata_2eproto::scc_info_target_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:target_cam.target_data)
}
target_data::target_data(const target_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_img()) {
    img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_);
  }
  lat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lat()) {
    lat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lat_);
  }
  long__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_long_()) {
    long__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long__);
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:target_cam.target_data)
}

void target_data::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0;
}

target_data::~target_data() {
  // @@protoc_insertion_point(destructor:target_cam.target_data)
  SharedDtor();
}

void target_data::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void target_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* target_data::descriptor() {
  ::protobuf_camdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const target_data& target_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camdata_2eproto::scc_info_target_data.base);
  return *internal_default_instance();
}


void target_data::Clear() {
// @@protoc_insertion_point(message_clear_start:target_cam.target_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      img_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      lat_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      long__.ClearNonDefaultToEmptyNoArena();
    }
  }
  seq_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool target_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:target_cam.target_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_cam.target_data.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes img = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lat().data(), static_cast<int>(this->lat().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_cam.target_data.lat");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string long = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->long_().data(), static_cast<int>(this->long_().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_cam.target_data.long");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:target_cam.target_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:target_cam.target_data)
  return false;
#undef DO_
}

void target_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:target_cam.target_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_cam.target_data.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 seq = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq(), output);
  }

  // optional bytes img = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->img(), output);
  }

  // optional string lat = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lat().data(), static_cast<int>(this->lat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_cam.target_data.lat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lat(), output);
  }

  // optional string long = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->long_().data(), static_cast<int>(this->long_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_cam.target_data.long");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->long_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:target_cam.target_data)
}

::google::protobuf::uint8* target_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:target_cam.target_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_cam.target_data.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 seq = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seq(), target);
  }

  // optional bytes img = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->img(), target);
  }

  // optional string lat = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lat().data(), static_cast<int>(this->lat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_cam.target_data.lat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lat(), target);
  }

  // optional string long = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->long_().data(), static_cast<int>(this->long_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_cam.target_data.long");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->long_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:target_cam.target_data)
  return target;
}

size_t target_data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:target_cam.target_data)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_seq()) {
    // required int32 seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  return total_size;
}
size_t target_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:target_cam.target_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional bytes img = 3;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->img());
    }

    // optional string lat = 4;
    if (has_lat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lat());
    }

    // optional string long = 5;
    if (has_long_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->long_());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void target_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:target_cam.target_data)
  GOOGLE_DCHECK_NE(&from, this);
  const target_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const target_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:target_cam.target_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:target_cam.target_data)
    MergeFrom(*source);
  }
}

void target_data::MergeFrom(const target_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:target_cam.target_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_img();
      img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_lat();
      lat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lat_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_long_();
      long__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long__);
    }
    if (cached_has_bits & 0x00000010u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void target_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:target_cam.target_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void target_data::CopyFrom(const target_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:target_cam.target_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool target_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  return true;
}

void target_data::Swap(target_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void target_data::InternalSwap(target_data* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  img_.Swap(&other->img_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lat_.Swap(&other->lat_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  long__.Swap(&other->long__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(seq_, other->seq_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata target_data::GetMetadata() const {
  protobuf_camdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace target_cam
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::target_cam::target_data* Arena::CreateMaybeMessage< ::target_cam::target_data >(Arena* arena) {
  return Arena::CreateInternal< ::target_cam::target_data >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
